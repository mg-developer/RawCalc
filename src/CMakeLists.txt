
INCLUDE_DIRECTORIES(
    ${CUDA_INCLUDE_DIRS}
    ${CUDA_TOOLKIT_ROOT_DIR}
    ${CUDA_HELPER_DIR}
    #Export header:
    ${CMAKE_CURRENT_BINARY_DIR}
)

SET(HEADERS
    Exports.h
    Logging.h
    ManagedMem.h
    ProgGPU.h
)

SET(SOURCES
    RawCalc.cpp
)

SET(CUDA_SOURCES
    ProgGPU.cu
    BitConverters.cu
)

SET(CUDA_VERBOSE_BUILD ON CACHE BOOL "nvcc verbose" FORCE)
# Set CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE when you want to add the same .cu
# file to multiple targets.
SET(CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE OFF)
SET(BUILD_SHARED_LIBS ON)
SET(CUDA_SEPARATE_COMPILATION ON)

SOURCE_GROUP("include" FILES
    ${HEADERS}
)

ADD_DEFINITIONS(-DBUILD_LIBRARY)
CUDA_ADD_LIBRARY(${PRJ_NAME} SHARED
    ${CUDA_SOURCES}
    ${SOURCES}
)
INCLUDE(GenerateExportHeader)
GENERATE_EXPORT_HEADER( ${PRJ_NAME}
    BASE_NAME ${PRJ_NAME}
    EXPORT_MACRO_NAME ${PRJ_NAME}_EXPORT
    EXPORT_FILE_NAME ${PRJ_NAME}_Export.h
    STATIC_DEFINE ${PRJ_NAME}_BUILT_AS_STATIC
)

SET_TARGET_PROPERTIES(${PRJ_NAME} PROPERTIES DEFINE_SYMBOL "COMPILING_DLL")
SET_TARGET_PROPERTIES(${PRJ_NAME} PROPERTIES INSTALL_RPATH ".")


TARGET_LINK_LIBRARIES(${PRJ_NAME}
    ${CUDA_LIBRARIES}
    ${PLATFORM_SPECIFIC_LIBRARIES}
)

INSTALL(TARGETS ${PRJ_NAME}
    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}
    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}
)

####### Linux sample test
SET(TEST_NAME RawTest)
IF(UNIX)
    ADD_EXECUTABLE(${TEST_NAME} RawConvertTest.cpp )
    TARGET_LINK_LIBRARIES(${TEST_NAME} dl)
    INSTALL(TARGETS ${TEST_NAME}
        RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}
)

ENDIF()
